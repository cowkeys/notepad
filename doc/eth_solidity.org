* 笔记
- 根据 https://cryptozombies.io/

** solidity语法
*** pure 
纯函数 不碰任何变量 return a*b

*** view
只get 变量 不做修改

*** require
function will throw an error and stop executing if some condition is not true

*** storage/memory
- storage: variables declared outside of functions 储存在链上
- memory: will disappear when the function call ends.

#+BEGIN_SRC
contract SandwichFactory {
  struct Sandwich {
    string name;
    string status;
  }

  Sandwich[] sandwiches;

  function eatSandwich(uint _index) public {
    // Sandwich mySandwich = sandwiches[_index];

    // ^ Seems pretty straightforward, but solidity will give you a warning
    // telling you that you should explicitly declare `storage` or `memory` here.

    // So instead, you should declare with the `storage` keyword, like:
    Sandwich storage mySandwich = sandwiches[_index];
    // ...in which case `mySandwich` is a pointer to `sandwiches[_index]`
    // in storage, and...
    mySandwich.status = "Eaten!";
    // ...this will permanently change `sandwiches[_index]` on the blockchain.

    // If you just want a copy, you can use `memory`:
    Sandwich memory anotherSandwich = sandwiches[_index + 1];
    // ...in which case `anotherSandwich` will simply be a copy of the 
    // data in memory, and...
    anotherSandwich.status = "Eaten!";
    // ...will just modify the temporary variable and have no effect 
    // on `sandwiches[_index + 1]`. But you can do this:
    sandwiches[_index + 1] = anotherSandwich;
    // ...if you want to copy the changes back into blockchain storage.
  }
}
#+END_SRC

*** public/private/internal/external
- internal is the same as private, except that it's also accessible to contracts that inherit from this contract. 
- external is similar to public, except that these functions can ONLY be called outside the contract
- private means it's only callable from other functions inside the contract; 
- internal is like private but can also be called by contracts that inherit from this one; 
- external can only be called outside the contract; 
- and finally public can be called anywhere, both internally and externally.

*** interface
如果想要调用其他contract的function可以定义一个contract 添加一个同名同参函数，单不需要{...} 直接 ; 结尾
#+BEGIN_SRC
contract KittyInterface {
function getData(string id) external view returns (bool isOk);
}
#+END_SRC

*** cost gas
变量uint = uint256 是一个意思
然后 uint uint8 uint16 32... gas花费一样 没有区别
但是 在struct 里面 uint uint8 ... 有区别 因为解析struct的时候 会需要更大的内存
还有 在struct里面同类型的变量 放在一起声明 要花费更少的gas
https://cryptozombies.io/en/lesson/3/chapter/4 

*** time
- now
- https://cryptozombies.io/en/lesson/3/chapter/5
- seconds, minutes, hours, days, weeks and years. 
- These will convert to a uint of the number of seconds in that length of time. 
- So 1 minutes is 60, 1 hours is 3600 (60 seconds x 60 minutes), 1 days is 86400 (24 hours x 60 minutes x 60 seconds), etc.

*** storage
相当于指针
#+BEGIN_SRC
function _triggerCooldown(Zombie storage _zombie) internal {
    _zombie.readyTime = uint32(now + cooldownTime);
  }
#+END_SRC

*** View functions don't cost gas (external view)
- view tells us that by running the function, no data will be saved/changed. 
- pure tells us that not only does the function not save any data to the blockchain, 
- but it also doesn't read any data from the blockchain. 
- Both of these don't cost any gas to call if they're called externally from outside the contract 
- (but they do cost gas if called internally by another function).

*** payable
- msg.value is a way to see how much Ether was sent to the contract, and ether is a built-in unit.
- webjs:  OnlineStore.buySomething({from: web3.eth.defaultAccount, value: web3.utils.toWei(0.001)}) 会这样调用合约
- 如果没有function payable 参数不能交易

*** transfer
- withdraw:  owner.transfer(this.balance);
- send: msg.sender.transfer(msg.value - fee);

*** random 不信任节点
如果随机ramdom一个随机hash数，哪个节点node来做这个random随机。如果是不信任的节点 得到这个work机会。就会有 dishonest attack
所以可以 从外部调接口类似 import "github.com/oraclize/ethereum-api/oraclizeAPI.sol";

*** ERC20 ERC721 
20 普通代币
721是类似以太猫一样 每一个都是unique

#+BEGIN_SRC
contract ERC721 {
  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);
  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);

  function balanceOf(address _owner) public view returns (uint256 _balance);
  function ownerOf(uint256 _tokenId) public view returns (address _owner);
  function transfer(address _to, uint256 _tokenId) public;
  function approve(address _to, uint256 _tokenId) public;
  function takeOwnership(uint256 _tokenId) public;
}
#+END_SRC

*** overflow underflow
- For example, with the SafeMath library, we'll use the syntax using SafeMath for uint256. 
- The SafeMath library has 4 functions — add, sub, mul, and div. And now we can access these functions from uint256 as follows:
using SafeMath for uint256;

#+BEGIN_SRC
//uint256 a = 5;
//uint256 b = a.add(3); // 5 + 3 = 8
//uint256 c = a.mul(2); // 5 * 2 = 10

import "./safemath.sol";
contract ... {
    using SageMath for uint256;
}
#+END_SRC

- Note that the mul and add functions each require 2 arguments, 
- but when we declare using SafeMath for uint, 
- the uint we call the function on (test) is automatically passed in as the first argument.

*** require assert
- assert is similar to require, where it will throw an error if false. 
- The difference between assert and require is that require will refund the user the rest of their gas when a function fails, 
- whereas assert will not. So most of the time you want to use require in your code; 
- assert is typically used when something has gone horribly wrong with the code (like a uint overflow).

** web3.js
*** call / send
- call is used for view and pure functions. It only runs on the local node, and won't create a transaction on the blockchain.
- send will create a transaction and change data on the blockchain. You'll need to use send for any functions that aren't view or pure.

*** Sending Transactions
#+BEGIN_SRC
function createRandomZombie(name) {
        
        
        $("#txStatus").text("Creating new zombie on the blockchain. This may take a while...");
        
        return cryptoZombies.methods.createRandomZombie(name)
        .send({ from: userAccount })
        .on("receipt", function(receipt) {
          $("#txStatus").text("Successfully created " + name + "!");
          
          getZombiesByOwner(userAccount).then(displayZombies);
        })
        .on("error", function(error) {
          
          $("#txStatus").text(error);
        });
      }


Our function sends a transaction to our Web3 provider, and chains some event listeners:
[receipt] will fire when the transaction is included into a block on Ethereum, which means our zombie has been created and saved on our contract
[error] will fire if there's an issue that prevented the transaction from being included in a block, such as the user not sending enough gas. We'll want to inform the user in our UI that the transaction didn't go through so they can try again.
Note: You can optionally specify gas and gasPrice when you call send, e.g. .send({ from: userAccount, gas: 3000000 }). If you don't specify this, MetaMask will let the user choose these values.
#+END_SRC

*** Calling Payable Functions
#+BEGIN_SRC
      function levelUp(zombieId) {
        $("#txStatus").text("Leveling up your zombie...");
        return cryptoZombies.methods.levelUp(zombieId)
        .send({ from: userAccount, value: web3js.utils.toWei("0.001", "ether") })
        .on("receipt", function(receipt) {
          $("#txStatus").text("Power overwhelming! Zombie successfully leveled up");
        })
        .on("error", function(error) {
          $("#txStatus").text(error);
        });
      }
      
#+END_SRC

*** Subscribing to Events
- Using indexed 只提醒给当某个地址
- event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);
#+BEGIN_SRC
// Use `filter` to only fire this code when `_to` equals `userAccount`
cryptoZombies.events.Transfer({ filter: { _to: userAccount } })
.on("data", function(event) {
  let data = event.returnValues;
  // The current user just received a zombie!
  // Do something here to update the UI to show it
}).on("error", console.error);
#+END_SRC

- Querying past events
#+BEGIN_SRC
cryptoZombies.getPastEvents("NewZombie", { fromBlock: 0, toBlock: "latest" })
.then(function(events) {
  // `events` is an array of `event` objects that we can iterate, like we did above
  // This code will get us a list of every zombie that was ever created
});
#+END_SRC

